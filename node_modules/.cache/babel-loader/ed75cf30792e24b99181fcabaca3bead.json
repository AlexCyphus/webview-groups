{"ast":null,"code":"var _jsxFileName = \"/Users/alexcyphus/Desktop/code/experiments/exp-1/src/App.js\";\nimport React, { Component } from 'react';\nimport Post from \"./components/Post\";\nimport Popup from \"./components/Popup\";\nimport ActionButton from \"./components/ActionButton\";\n\nconst mysql = require('mysql');\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      card: 0,\n      id: 0\n    };\n    this.togglePopup = this.togglePopup.bind(this);\n    this.closePopup = this.closePopup.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  } // don't load anything for a second\n  // more diversity of content\n  // text area answering box should be clearing responses and the keyboard shouldn't cover it. https://stackoverflow.com/questions/51606099/how-to-detect-when-keyboard-is-opened-or-closed-in-react-native\n  // send clicks to the backend\n  //  CLEARDB_DATABASE_URL: mysql://ba7f4376abe00d:2aaec46f@us-cdbr-east-02.cleardb.com/heroku_aaae19a4220d4fe?reconnect=true\n\n\n  componentDidMount() {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', '/api/initiate');\n    xhr.send();\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        this.setState({\n          id: JSON.parse(xhr.response).id\n        });\n      }\n    };\n  }\n\n  togglePopup() {\n    var theUrl = \"/json-handler\";\n    xmlhttp.open(\"POST\", theUrl);\n    xmlhttp.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n    xmlhttp.send(JSON.stringify({\n      \"email\": \"hello@user.com\",\n      \"response\": {\n        \"name\": \"Tester\"\n      }\n    }));\n    var xhr = new XMLHttpRequest();\n    var newCard = this.state.card + 1;\n    this.setState({\n      card: newCard\n    });\n\n    if (this.state.card == 0) {\n      let url = \"/api/see_more_clicked\";\n      xhr.send(JSON.stringify({\n        \"email\": \"hello@user.com\",\n        \"response\": {\n          \"name\": \"Tester\"\n        }\n      }));\n      xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n      xhr.open('POST', url);\n    }\n\n    if (this.state.card == 1) {\n      xhr.open('GET', '/api/upgrade_clicked');\n    }\n\n    if (this.state.card == 2) {\n      xhr.open('GET', '/api/submit_clicked');\n    }\n\n    xhr.send();\n  }\n\n  handleChange(e) {\n    this.setState({\n      value: e\n    });\n  }\n\n  handleSubmit() {// send to the backend\n  }\n\n  closePopup() {\n    this.setState({\n      card: 0\n    });\n  }\n\n  handleSendData(data) {\n    var xhr = new XMLHttpRequest();\n    xhr.addEventListener('load', () => {\n      console.log(xhr.responseText);\n    });\n    xhr.open('GET', 'https://script.google.com/macros/s/AKfycbzvr-cEKCg6qEdLNl56REPxoMcLtdzhL_j4_R9iFZihbbvwRz5A/exec?data=\"' + data + \"'\");\n    xhr.send();\n  } //<button onClick={() => this.handleSendUsername('test')}>Hello World</button>\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Popup, {\n      card: this.state.card,\n      togglePopup: this.togglePopup,\n      closePopup: this.closePopup,\n      value: this.value,\n      handleChange: this.handleChange,\n      handleSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: this.state.card ? 'black' : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Post, {\n      name: \"Alex\",\n      time: \"1\",\n      postImage: \"llama.png\",\n      message: \"Have you ever been to Peru? I just got to Nazca and am absolutely in love with Peruvian culture. I got spat on by a llama but that's okay. \\xA1Viva Per\\xFA!\",\n      likes: \"155\",\n      comments: \"55\",\n      togglePopup: this.togglePopup,\n      userImage: \"alex.png\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Post, {\n      name: \"Tamara\",\n      time: \"15\",\n      message: \"Has anyone read the Harry Potter series? I have never read it before \\uD83D\\uDE2C. Would you recommend it? What is so great about it? Is the British English hard to understand?\",\n      likes: \"20\",\n      comments: \"3\",\n      userImage: \"tamara.png\",\n      togglePopup: this.togglePopup,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Post, {\n      name: \"Chelsea\",\n      time: \"36\",\n      postImage: \"audio.png\",\n      message: \"How's my prounciation?\",\n      likes: \"43\",\n      comments: \"32\",\n      userImage: \"chelsea.png\",\n      specId: \"audio\",\n      togglePopup: this.togglePopup,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ActionButton, {\n      action: this.togglePopup,\n      text: \"SEE MORE\",\n      specId: \"see-more\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/alexcyphus/Desktop/code/experiments/exp-1/src/App.js"],"names":["React","Component","Post","Popup","ActionButton","mysql","require","App","constructor","state","card","id","togglePopup","bind","closePopup","handleChange","handleSubmit","componentDidMount","xhr","XMLHttpRequest","open","send","onreadystatechange","readyState","setState","JSON","parse","response","theUrl","xmlhttp","setRequestHeader","stringify","newCard","url","e","value","handleSendData","data","addEventListener","console","log","responseText","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Post from \"./components/Post\"\nimport Popup from \"./components/Popup\"\nimport ActionButton from \"./components/ActionButton\"\nconst mysql = require('mysql');\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      card: 0,\n      id: 0\n    }\n    this.togglePopup = this.togglePopup.bind(this);\n    this.closePopup = this.closePopup.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  // don't load anything for a second\n  // more diversity of content\n  // text area answering box should be clearing responses and the keyboard shouldn't cover it. https://stackoverflow.com/questions/51606099/how-to-detect-when-keyboard-is-opened-or-closed-in-react-native\n  // send clicks to the backend\n  //  CLEARDB_DATABASE_URL: mysql://ba7f4376abe00d:2aaec46f@us-cdbr-east-02.cleardb.com/heroku_aaae19a4220d4fe?reconnect=true\n\n  componentDidMount() {\n    var xhr = new XMLHttpRequest()\n    xhr.open('GET','/api/initiate');\n    xhr.send();\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        this.setState({id: JSON.parse(xhr.response).id});\n      }\n    }\n  }\n\n  togglePopup() {\n\n    var theUrl = \"/json-handler\";\n    xmlhttp.open(\"POST\", theUrl);\n    xmlhttp.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n    xmlhttp.send(JSON.stringify({ \"email\": \"hello@user.com\", \"response\": { \"name\": \"Tester\" } }));\n\n\n    var xhr = new XMLHttpRequest()\n    var newCard = this.state.card + 1\n    this.setState({card: newCard});\n    if (this.state.card == 0) {\n      let url = \"/api/see_more_clicked\"\n\n      xhr.send(JSON.stringify({ \"email\": \"hello@user.com\", \"response\": { \"name\": \"Tester\" } }));\n      xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n      xhr.open('POST', url);\n    }\n    if (this.state.card == 1) {xhr.open('GET','/api/upgrade_clicked');}\n    if (this.state.card == 2) {xhr.open('GET','/api/submit_clicked');}\n    xhr.send();\n  }\n\n  handleChange(e){\n    this.setState({value: e});\n  }\n\n  handleSubmit(){\n    // send to the backend\n  }\n\n  closePopup(){\n    this.setState({card: 0})\n  }\n\n  handleSendData(data) {\n    var xhr = new XMLHttpRequest()\n    xhr.addEventListener('load', () => {console.log(xhr.responseText)})\n    xhr.open('GET','https://script.google.com/macros/s/AKfycbzvr-cEKCg6qEdLNl56REPxoMcLtdzhL_j4_R9iFZihbbvwRz5A/exec?data=\"' + data + \"'\")\n    xhr.send()\n  }\n\n  //<button onClick={() => this.handleSendUsername('test')}>Hello World</button>\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Popup card={this.state.card} togglePopup={this.togglePopup} closePopup = {this.closePopup} value={this.value} handleChange={this.handleChange} handleSubmit={this.handleSubmit}/>\n        <div>\n        </div>\n        <div className={this.state.card ? 'black' : ''}></div>\n        <Post\n          name=\"Alex\"\n          time=\"1\"\n          postImage=\"llama.png\"\n          message=\"Have you ever been to Peru? I just got to Nazca and am absolutely in love with Peruvian culture. I got spat on by a llama but that's okay. ¡Viva Perú!\"\n          likes=\"155\"\n          comments=\"55\"\n          togglePopup = {this.togglePopup}\n          userImage = \"alex.png\"\n        />\n        <Post\n          name=\"Tamara\"\n          time=\"15\"\n          message=\"Has anyone read the Harry Potter series? I have never read it before 😬. Would you recommend it? What is so great about it? Is the British English hard to understand?\"\n          likes=\"20\"\n          comments=\"3\"\n          userImage = \"tamara.png\"\n          togglePopup = {this.togglePopup}\n        />\n        <Post\n          name=\"Chelsea\"\n          time=\"36\"\n          postImage=\"audio.png\"\n          message=\"How's my prounciation?\"\n          likes=\"43\"\n          comments=\"32\"\n          userImage = \"chelsea.png\"\n          specId = \"audio\"\n          togglePopup = {this.togglePopup}\n        />\n        <ActionButton action={this.togglePopup} text=\"SEE MORE\" specId=\"see-more\"/>\n      </div>\n    )\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}